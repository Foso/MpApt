{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MpApt - Kotlin (Native/JS/JVM) Annotation Processor library Introduction \ud83d\ude4b\u200d\u2642\ufe0f \ud83d\ude4b\u200d I wrote an annotation processing libary that can detect annotations in Kotlin Native/JS and Jvm projects, because Kapt is only working with KotlinJvm. The library can be used in Kotlin Compiler plugins. Tested with Kotlin 1.3.41 and 1.3.50 It can detect annotations with following targets: (CLASS,FUNCTION,PROPERTY,VALUE_PARAMETER,PROPERTY_GETTER,PROPERTY_GETTER,CONSTRUCTOR) Example output of my example plugin on Kotlin Native: Usage These are the instructions for v0.8.1, check Changelog for changes on the active development branch Inside your compiler plugin, add the dependency from MavenCentral repositories { mavenCentral() } dependencies { compile 'de.jensklingenberg:mpapt-runtime:0.8.1' } 1) Create a class that extends de.jensklingenberg.mpapt.model.AbstractProcessor class MpAptTestProcessor() : AbstractProcessor() { 2) Add the names of your annotations that you want to detect: override fun getSupportedAnnotationTypes(): Set String = setOf(TestClass::class.java.name, TestFunction::class.java.name) 3) Do something with detected annotations: override fun process(roundEnvironment: RoundEnvironment) { roundEnvironment.getElementsAnnotatedWith(TestClass::class.java.name).forEach { when (it) { is Element.ClassElement - { log( Found Class: + it.classDescriptor.name + Module: + it.classDescriptor.module.simpleName() + platform + activeTargetPlatform.first().platformName) } } } roundEnvironment.getElementsAnnotatedWith(TestFunction::class.java.name).forEach { when (it) { is Element.FunctionElement - { log( Found Function: + it.func.name + Module: + it.func.module.simpleName() + platform + activeTargetPlatform.first().platformName) } } } } 4) Init MpApt inside your ComponentRegistrar: Pass an instance of your processor and the CompilerConfiguration into MpAptProject Then add an instance of MpAptProject to the following extension classes: Inside a Kotlin Native Compiler Plugin: override fun registerProjectComponents(project: MockProject, configuration: CompilerConfiguration) { val processor = MpAptTestProcessor() val mpapt = MpAptProject(processor,configuration) StorageComponentContainerContributor.registerExtension(project,mpapt) SyntheticResolveExtension.registerExtension(project, mpapt) IrGenerationExtension.registerExtension(project,mpapt) } Inside a Kotlin JVM/JS Compiler Plugin: override fun registerProjectComponents( project: MockProject, configuration: CompilerConfiguration ) { val processor = MpAptTestProcessor() val mpapt = MpAptProject(processor,configuration) StorageComponentContainerContributor.registerExtension(project,mpapt) SyntheticResolveExtension.registerExtension(project, mpapt) ClassBuilderInterceptorExtension.registerExtension(project,mpapt) JsSyntheticTranslateExtension.registerExtension(project,mpapt) } 5) That's it Choose supported target platforms By default your processor is enabled for every target. You can override isTargetPlatformSupported(platform: TargetPlatform): Boolean and return \"true\" if you want to support the target or \"false\" you don't. override fun isTargetPlatformSupported(platform: TargetPlatform): Boolean { val targetName = platform.first().platformName return when (targetName) { KotlinPlatformValues.JS - true KotlinPlatformValues.JVM - true KotlinPlatformValues.NATIVE - { return when (configuration.nativeTargetPlatformName()) { KonanTargetValues.LINUX_X64, KonanTargetValues.MACOS_X64 - { true } else - { true } } } else - { log(targetName) true } } } You can distinguish between the native target platforms you want to support. configuration.nativeTargetPlatformName() will get you the names of the Native Targets(macos_x64,linux_x64,etc). The values are defined in KonanTargetValues. It needs to be used only on Kotlin Native otherwise it will return an empty string \u270d\ufe0f Feedback Feel free to send feedback on Twitter or file an issue . Feature requests are always welcome. If you wish to contribute, please take a quick look at How to develop? \ud83d\udc77 Development Project Structure demoProject - An example project that is using MpApt+KotlinPoet to generate code on KotlinJS annotations - A Kotlin Multiplatform project which contains test annotations example - A Kotlin Multiplatform project which applies a gradle plugin(de.jensklingenberg.mpapt) whichs triggers the compiler plugin. buildSrc - This module contains the gradle plugin which trigger the compiler plugin kotlin-plugin - This module contains the Kotlin Compiler Plugin for JVM/JS targets, it implements the kotlin-plugin-shared -module kotlin-compiler-native-plugin - This module contains the Kotlin Compiler Plugin for Native targets, it implements the kotlin-plugin-shared -module kotlin-plugin-shared Contains an implementation of MpApt Projects that use MpApt: Native Suspended Functions See also How to use a Kotlin Compiler Plugin from Gradle Plugin How to write a Kotlin Compiler Plugin How to debug Kotlin Compiler Plugin How to develop? \ud83d\udcdc License This project is licensed under the Apache License, Version 2.0 - see the LICENSE.md file for details Copyright 2019 Jens Klingenberg Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#introduction","text":"I wrote an annotation processing libary that can detect annotations in Kotlin Native/JS and Jvm projects, because Kapt is only working with KotlinJvm. The library can be used in Kotlin Compiler plugins. Tested with Kotlin 1.3.41 and 1.3.50 It can detect annotations with following targets: (CLASS,FUNCTION,PROPERTY,VALUE_PARAMETER,PROPERTY_GETTER,PROPERTY_GETTER,CONSTRUCTOR) Example output of my example plugin on Kotlin Native:","title":"Introduction \ud83d\ude4b\u200d\u2642\ufe0f \ud83d\ude4b\u200d"},{"location":"#usage","text":"These are the instructions for v0.8.1, check Changelog for changes on the active development branch Inside your compiler plugin, add the dependency from MavenCentral repositories { mavenCentral() } dependencies { compile 'de.jensklingenberg:mpapt-runtime:0.8.1' } 1) Create a class that extends de.jensklingenberg.mpapt.model.AbstractProcessor class MpAptTestProcessor() : AbstractProcessor() { 2) Add the names of your annotations that you want to detect: override fun getSupportedAnnotationTypes(): Set String = setOf(TestClass::class.java.name, TestFunction::class.java.name) 3) Do something with detected annotations: override fun process(roundEnvironment: RoundEnvironment) { roundEnvironment.getElementsAnnotatedWith(TestClass::class.java.name).forEach { when (it) { is Element.ClassElement - { log( Found Class: + it.classDescriptor.name + Module: + it.classDescriptor.module.simpleName() + platform + activeTargetPlatform.first().platformName) } } } roundEnvironment.getElementsAnnotatedWith(TestFunction::class.java.name).forEach { when (it) { is Element.FunctionElement - { log( Found Function: + it.func.name + Module: + it.func.module.simpleName() + platform + activeTargetPlatform.first().platformName) } } } } 4) Init MpApt inside your ComponentRegistrar: Pass an instance of your processor and the CompilerConfiguration into MpAptProject Then add an instance of MpAptProject to the following extension classes: Inside a Kotlin Native Compiler Plugin: override fun registerProjectComponents(project: MockProject, configuration: CompilerConfiguration) { val processor = MpAptTestProcessor() val mpapt = MpAptProject(processor,configuration) StorageComponentContainerContributor.registerExtension(project,mpapt) SyntheticResolveExtension.registerExtension(project, mpapt) IrGenerationExtension.registerExtension(project,mpapt) } Inside a Kotlin JVM/JS Compiler Plugin: override fun registerProjectComponents( project: MockProject, configuration: CompilerConfiguration ) { val processor = MpAptTestProcessor() val mpapt = MpAptProject(processor,configuration) StorageComponentContainerContributor.registerExtension(project,mpapt) SyntheticResolveExtension.registerExtension(project, mpapt) ClassBuilderInterceptorExtension.registerExtension(project,mpapt) JsSyntheticTranslateExtension.registerExtension(project,mpapt) } 5) That's it","title":"Usage"},{"location":"#choose-supported-target-platforms","text":"By default your processor is enabled for every target. You can override isTargetPlatformSupported(platform: TargetPlatform): Boolean and return \"true\" if you want to support the target or \"false\" you don't. override fun isTargetPlatformSupported(platform: TargetPlatform): Boolean { val targetName = platform.first().platformName return when (targetName) { KotlinPlatformValues.JS - true KotlinPlatformValues.JVM - true KotlinPlatformValues.NATIVE - { return when (configuration.nativeTargetPlatformName()) { KonanTargetValues.LINUX_X64, KonanTargetValues.MACOS_X64 - { true } else - { true } } } else - { log(targetName) true } } } You can distinguish between the native target platforms you want to support. configuration.nativeTargetPlatformName() will get you the names of the Native Targets(macos_x64,linux_x64,etc). The values are defined in KonanTargetValues. It needs to be used only on Kotlin Native otherwise it will return an empty string","title":"Choose supported target platforms"},{"location":"#feedback","text":"Feel free to send feedback on Twitter or file an issue . Feature requests are always welcome. If you wish to contribute, please take a quick look at How to develop?","title":"\u270d\ufe0f Feedback"},{"location":"#development-project-structure","text":"demoProject - An example project that is using MpApt+KotlinPoet to generate code on KotlinJS annotations - A Kotlin Multiplatform project which contains test annotations example - A Kotlin Multiplatform project which applies a gradle plugin(de.jensklingenberg.mpapt) whichs triggers the compiler plugin. buildSrc - This module contains the gradle plugin which trigger the compiler plugin kotlin-plugin - This module contains the Kotlin Compiler Plugin for JVM/JS targets, it implements the kotlin-plugin-shared -module kotlin-compiler-native-plugin - This module contains the Kotlin Compiler Plugin for Native targets, it implements the kotlin-plugin-shared -module kotlin-plugin-shared Contains an implementation of MpApt","title":"\ud83d\udc77 Development Project Structure"},{"location":"#projects-that-use-mpapt","text":"Native Suspended Functions","title":"Projects that use MpApt:"},{"location":"#see-also","text":"How to use a Kotlin Compiler Plugin from Gradle Plugin How to write a Kotlin Compiler Plugin How to debug Kotlin Compiler Plugin How to develop?","title":"See also"},{"location":"#license","text":"This project is licensed under the Apache License, Version 2.0 - see the LICENSE.md file for details Copyright 2019 Jens Klingenberg Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"\ud83d\udcdc License"},{"location":"CHANGELOG/","text":"v0.8.1 ======================================== You can now distinguish between which native target platforms you want to support. Before processing the isTargetPlatformSupported(platform: TargetPlatform) will be called and you can return true if you want to enable your processor for this target or false if you don't. By default this methods returns true configuration.nativeTargetPlatformName() will get you the names of the Native Targets(macos_x64,linux_x64,etc) the values are defined in KonanTargetValues. It needs to be used only on Kotlin Native otherwise it will return an empty string Example: override fun isTargetPlatformSupported(platform: TargetPlatform): Boolean { val targetName = platform.first().platformName return when (targetName) { KotlinPlatformValues.JS - false KotlinPlatformValues.JVM - true KotlinPlatformValues.NATIVE - { return when (configuration.nativeTargetPlatformName()) { KonanTargetValues.LINUX_X64,KonanTargetValues.MACOS_X64 - { false } else- { false } } } else - { log(targetName) false } } } ======================================== Changed the initialization of the library. Now you need to add the compiler configuration to the MpAptProject val processor = MpAptTestProcessor() val mpapt = MpAptProject(processor,configuration)","title":"Changelog"},{"location":"test/","text":"Hallo","title":"Test"}]}